<!-- 
RSS generated by JIRA (4.1.2#531) at Wed Nov 10 06:31:05 CST 2010

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
http://jira.codehaus.org/si/jira.issueviews:issue-xml/JAXEN-177/JAXEN-177.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>jira.codehaus.org</title>
    <link>http://jira.codehaus.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>4.1.2</version>
        <build-number>531</build-number>
        <build-date>07-06-2010</build-date>
        <edition>enterprise</edition>
    </build-info>

<item>
            <title>[JAXEN-177] Expression.getText() returns invalid XPath query strings</title>
                <link>http://jira.codehaus.org/browse/JAXEN-177</link>
                <project id="10022" key="JAXEN">jaxen</project>
                        <description>&lt;p&gt;There is at least one scenario where calling the getText() method on the Jaxen XPath AST classes can result in an invalid XPath query string, such that Jaxen cannot be asked to create a new BaseXPath from the result of getText().&lt;/p&gt;

&lt;p&gt;1) A LiteralExpr where the value contains a &quot; (double quote) character.  The resulting getText() looks like:&lt;/p&gt;

&lt;p&gt;&quot;&quot;&quot;  (3 double quotes).&lt;/p&gt;

&lt;p&gt;The original XPath query string was:&lt;/p&gt;

&lt;p&gt;&apos;&quot;&apos;   (single quote, double quote, single quote)&lt;/p&gt;

&lt;p&gt;And example of a problematic query from the PMD project is the optimizations.xml/SimplifyStartsWith rule, which uses XPath:&lt;/p&gt;

&lt;p&gt;//PrimaryExpression&lt;br/&gt;
 [PrimaryPrefix/Name&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;ends-with(@Image, &amp;#39;.startsWith&amp;#39;)&amp;#93;&lt;/span&gt;]&lt;br/&gt;
 [PrimarySuffix/Arguments/ArgumentList&lt;br/&gt;
  /Expression/PrimaryExpression/PrimaryPrefix&lt;br/&gt;
  /Literal&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;string-length(@Image)=3&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;starts-with(@Image, &amp;#39;&amp;quot;&amp;#39;)&amp;#93;&lt;/span&gt;&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;ends-with(@Image, &amp;#39;&amp;quot;&amp;#39;)&amp;#93;&lt;/span&gt;&lt;/p&gt;</description>
                <environment></environment>
            <key id="45558">JAXEN-177</key>
            <summary>Expression.getText() returns invalid XPath query strings</summary>
                <type id="1" iconUrl="http://jira.codehaus.org/images/icons/bug.gif">Bug</type>
                                <priority id="3" iconUrl="http://jira.codehaus.org/images/icons/priority_major.gif">Major</priority>
                    <status id="6" iconUrl="http://jira.codehaus.org/images/icons/status_closed.gif">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="rgustav">Ryan Gustafson</reporter>
                        <created>Wed, 3 Jan 2007 11:22:12 -0600</created>
                <updated>Sat, 6 Jan 2007 05:51:31 -0600</updated>
                    <resolved>Sat, 6 Jan 2007 05:51:31 -0600</resolved>
                            <version>1.1</version>
                                                <component>core</component>
                        <due></due>
                    <votes>0</votes>
                                                    <comments>
                    <comment id="83925" author="elharo" created="Wed, 3 Jan 2007 12:28:54 -0600"  >&lt;p&gt;You specified this against 1.0. Have you tried 1.1? We&apos;ve fixed a lot of bugs since 1.0. &lt;/p&gt;

&lt;p&gt;The issue is not immediately apparent to me. If you had a test case, that would help. &lt;/p&gt;</comment>
                    <comment id="83926" author="elharo" created="Wed, 3 Jan 2007 12:35:20 -0600"  >&lt;p&gt;I see the problem. It is still present in 1.1. The solution will be tricky. There are four cases we need to handle in DefaultLiteralExpr:&lt;/p&gt;

&lt;p&gt;1. String contains no quote marks&lt;/p&gt;

&lt;p&gt;2. String contains only single quote marks&lt;/p&gt;

&lt;p&gt;3. String contains only double quote marks&lt;/p&gt;

&lt;p&gt;4. String contains both single and double quote marks&lt;/p&gt;

&lt;p&gt;That last one&apos;s painful. I can fix this. It will just make the code more convoluted. &lt;/p&gt;</comment>
                    <comment id="83927" author="rgustav" created="Wed, 3 Jan 2007 12:40:01 -0600"  >&lt;p&gt;Darn it, sorry!  It&apos;s against 1.1.&lt;/p&gt;

&lt;p&gt;Test case:&lt;/p&gt;

&lt;p&gt;    	BaseXPath baseXPath = new BaseXPath(&quot;//Name&lt;span class=&quot;error&quot;&gt;&amp;#91;@Attribute = &amp;#39;\&amp;quot;&amp;#39;&amp;#93;&lt;/span&gt;&quot;, null);&lt;br/&gt;
    	BaseXPath baseXPath2 = new BaseXPath(baseXPath.getRootExpr().getText(), null);&lt;/p&gt;


&lt;p&gt;Throws an XPathSyntaxException from the 2nd line:&lt;/p&gt;

&lt;p&gt;org.jaxen.saxpath.XPathSyntaxException: /descendant-or-self::node()/child::Name&lt;span class=&quot;error&quot;&gt;&amp;#91;(attribute::Attribute = &amp;quot;&amp;quot;&amp;quot;)&amp;#93;&lt;/span&gt;: 69: Expected: )&lt;/p&gt;</comment>
                    <comment id="83929" author="rgustav" created="Wed, 3 Jan 2007 12:52:39 -0600"  >&lt;p&gt;What I&apos;m doing for PMD is taking a query like:&lt;/p&gt;

&lt;p&gt;//PrimaryExpression&lt;br/&gt;
[PrimaryPrefix/Name&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ends-with(@Image, &amp;#39;.startsWith&amp;#39;)&amp;#93;&lt;/span&gt;]&lt;br/&gt;
[PrimarySuffix/Arguments/ArgumentList&lt;br/&gt;
/Expression/PrimaryExpression/PrimaryPrefix&lt;br/&gt;
/Literal&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;string-length(@Image)=3&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;starts-with(@Image, &amp;#39;&amp;quot;&amp;#39;)&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ends-with(@Image, &amp;#39;&amp;quot;&amp;#39;)&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And trying to change it into:&lt;/p&gt;

&lt;p&gt;./&lt;br/&gt;
[PrimaryPrefix/Name&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ends-with(@Image, &amp;#39;.startsWith&amp;#39;)&amp;#93;&lt;/span&gt;]&lt;br/&gt;
[PrimarySuffix/Arguments/ArgumentList&lt;br/&gt;
/Expression/PrimaryExpression/PrimaryPrefix&lt;br/&gt;
/Literal&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;string-length(@Image)=3&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;starts-with(@Image, &amp;#39;&amp;quot;&amp;#39;)&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ends-with(@Image, &amp;#39;&amp;quot;&amp;#39;)&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;To do that, I&apos;m crawling the Jaxen AST, and finding the appropriate sub-branch, and hooking it up to the approriate LocationPath/AllNodeStep etc. to represent the morphed query.  I then to get a BaseXPath from it.  The only API for that I can find requires I call getText().  That&apos;s when I hit this bug.&lt;/p&gt;

&lt;p&gt;I&apos;ve worked around it temporarily to fix it for queries built into PMD, but my workaround does not work for arbitrarily XPaths a PMD user might write.&lt;/p&gt;

&lt;p&gt;I&apos;d be happy with an alternative if you can point one out.  In case you&apos;d rather not fix the bug because of the complexity.&lt;/p&gt;</comment>
                    <comment id="83941" author="elharo" created="Wed, 3 Jan 2007 14:49:54 -0600"  >&lt;p&gt;I&apos;ve checked a tentative fix into CVS. Can you try that out and verify that it solves your problem? Thanks. &lt;/p&gt;</comment>
                    <comment id="83983" author="bazzargh" created="Thu, 4 Jan 2007 00:02:56 -0600"  >&lt;p&gt;If it makes life any easier Elliotte, your case &apos;4&apos; is supposed to be disallowed by the spec.&lt;br/&gt;
&lt;a href=&quot;http://www.w3.org/TR/xpath#NT-Literal&quot;&gt;http://www.w3.org/TR/xpath#NT-Literal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we&apos;re allowing that we have another bug &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.codehaus.org/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="83985" author="rgustav" created="Thu, 4 Jan 2007 00:33:32 -0600"  >&lt;p&gt;The original problem is fixed with this change.&lt;/p&gt;

&lt;p&gt;There is however some other problem with the CVS version of Jaxen, as 3 of the PMD unit tests are failing.  I believe it is with the change to DefaultBinaryExpr which removed parenthesis in the output.  This is causing precedence problems.  For example, our original XPath is:&lt;/p&gt;

&lt;p&gt;//ConstructorDeclaration&lt;span class=&quot;error&quot;&gt;&amp;#91;@Private=&amp;#39;false&amp;#39;&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;count(BlockStatement) = 0 and ($ignoreExplicitConstructorInvocation = &amp;#39;true&amp;#39; or not(ExplicitConstructorInvocation)) and @containsComment = &amp;#39;false&amp;#39;&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And after getText() it is:&lt;/p&gt;

&lt;p&gt;/descendant-or-self::node()/child::CatchStatement&lt;span class=&quot;error&quot;&gt;&amp;#91;count(child::Block/child::BlockStatement) = 0.0 and $allowCommentedBlocks != &amp;quot;true&amp;quot; or child::Block/attribute::containsComment = &amp;quot;false&amp;quot;&amp;#93;&lt;/span&gt;[child::FormalParameter/child::Type/child::ReferenceType/child::ClassOrInterfaceType&lt;span class=&quot;error&quot;&gt;&amp;#91;attribute::Image != &amp;quot;InterruptedException&amp;quot; and attribute::Image != &amp;quot;CloneNotSupportedException&amp;quot;&amp;#93;&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;The ( ) around the LHS of the AND have been removed.   What was (A and (B or C)) is now equivalent to ((A and B) or C).&lt;/p&gt;

&lt;p&gt;If you really want getText() to work, and stay working, I&apos;d recommend enhancing the unit tests to check every query tested with something like the following (assuming you have a means to compare &quot;equality&quot; between two AST instances):&lt;/p&gt;

&lt;p&gt;   Expr expr1 = new BaseXPath(xpath).getRootExpr();&lt;br/&gt;
   Expr expr2 = new BaseXPath(expr1.getText()).getRootExpr();&lt;br/&gt;
   assertEqualASTs(expr1, expr2);&lt;/p&gt;</comment>
                    <comment id="83986" author="rgustav" created="Thu, 4 Jan 2007 00:34:41 -0600"  >&lt;p&gt;Sorry, I meant to say RHS in the prior comment, not LHS.&lt;/p&gt;</comment>
                    <comment id="84015" author="elharo" created="Thu, 4 Jan 2007 08:32:12 -0600"  >&lt;p&gt;OK. I&apos;ll look into this, and if necessary that change should be easy enough to back out. &lt;/p&gt;

&lt;p&gt;Obviously we could use more unit tests around this functionality. I don&apos;t use it myself so I haven&apos;t looked at it very closely. Any additional tests you care to contribute would be welcome. &lt;/p&gt;

&lt;p&gt;Implementing assertEqualASTs is tricky because of the differences between abbreviated and unabbreviated paths. I&apos;ve opened an RFE for this.&lt;/p&gt;</comment>
                    <comment id="84016" author="elharo" created="Thu, 4 Jan 2007 08:32:45 -0600"  >&lt;p&gt;Changing target to 1.1&lt;/p&gt;</comment>
                    <comment id="84028" author="rgustav" created="Thu, 4 Jan 2007 11:16:11 -0600"  >&lt;p&gt;I think I can write an equality check.  However I&apos;m only familiar with the Jaxen AST interfaces at this point, and not with any of the implementation details.  I&apos;ll see what I can do for tests though.&lt;/p&gt;

&lt;p&gt;If you can point me to something in docs or code which will explain this abbreviated and unabbreviated paths difference to me, I&apos;ll look into it.  Are not the org.jaxen.expr.* trees built the same regardless of whether I specify /foo or /child::foo ?  I realize the string itself is different, but they have the same meaning, and I would expect to see the same tree result?&lt;/p&gt;</comment>
                    <comment id="84029" author="bob" created="Thu, 4 Jan 2007 11:26:45 -0600"  >&lt;p&gt;Syntactically equal  xpath expressions should build the same AST.&lt;/p&gt;

&lt;p&gt;Semantically equal xpaths might have radically different ASTs.&lt;/p&gt;

&lt;p&gt;But yes, /foo and /child::foo should be the same AST.  Same as //foo and /descendant-or-self::foo or whatnot.  All short-hand notations are erased by the parser into fully expanded versions.  I think the AST toString() demonstrates such.&lt;/p&gt;</comment>
                    <comment id="84031" author="rgustav" created="Thu, 4 Jan 2007 11:48:08 -0600"  >&lt;p&gt;Ok then, so I should be able to do a node-by-node comparison of the trees from each of the BaseXPath.getRootExpr() like I proposed?  I can whip something up this weekend hopefully and submit a patch.&lt;/p&gt;

&lt;p&gt;I&apos;m not proposing to call equal() on the nodes, but rather define a node Comparator.  Not that &amp;gt; or &amp;lt; will have any practical value, but it can be done without intrusive changes to the Jaxen internals.&lt;/p&gt;</comment>
                    <comment id="84130" author="elharo" created="Fri, 5 Jan 2007 12:34:52 -0600"  >&lt;p&gt;This should be fixed again in CVS. Please verify. &lt;/p&gt;

&lt;p&gt;The current code is often using unnecessary parentheses but that&apos;s better than not using required ones. Possibly we coudl fix this by adding ParenthesizedExpr as a separate interface so that parentheses from the original expressions would be preserved in the AST we build.&lt;/p&gt;
</comment>
                    <comment id="84157" author="rgustav" created="Sat, 6 Jan 2007 01:01:05 -0600"  >&lt;p&gt;Appears to be working.  I&apos;m considering this issue fixed, feel free to close it.&lt;/p&gt;

&lt;p&gt;I don&apos;t know the value in identical preservation of input parenthesis.  Jaxen is surely not preserving axis shorthand, etc.  The parenthesis omitted in the original query are there by implication in the same fashion the axis are.  Seems inconsistent to treat these differently.&lt;/p&gt;

&lt;p&gt;I think removal of parenthesis and use of shorthand would be more for something like a getSimplifiedText().&lt;/p&gt;

&lt;p&gt;I&apos;ll be submitting a patch under the RFE you created in a short while.&lt;/p&gt;</comment>
                    <comment id="84173" author="elharo" created="Sat, 6 Jan 2007 05:51:31 -0600"  >&lt;p&gt;Fixed. &lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                    <customfield id="customfield_10163" key="com.atlassian.jira.toolkit:dayslastcommented">
                <customfieldname>Days since last comment</customfieldname>
                <customfieldvalues>
                                3 years, 44 weeks, 4 days ago
    
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10210" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Number of attachments </customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10161" key="com.atlassian.jira.toolkit:participants">
                <customfieldname>Participants</customfieldname>
                <customfieldvalues>
                                <customfieldvalue>bob</customfieldvalue>
            <customfieldvalue>bazzargh</customfieldvalue>
            <customfieldvalue>elharo</customfieldvalue>
            <customfieldvalue>rgustav</customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>
</channel>
</rss>