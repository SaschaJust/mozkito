AuthorEqualityEngine.confidenceDescription=Score for equal authors in transaction and report comments.
AuthorEqualityEngine.description=Scores according to the equality of both entities (at some time in the history).
BackrefEngine.confidenceDescription=Score for back reference in transaction and report.
BackrefEngine.description=Scores if the 'to' entity contains a reference to the 'from' entity in the body text.
CommentSearchEngine.description=Scores based on document similarity/relevance based on commit message and report comments.
CompletedOrderEngine.confidenceDescription=Score in case the report was resolved before the transaction.
CompletedOrderEngine.description=Scores negative if the report was resolved before the transaction was committed.
CreationOrderEngine.confidenceDescription=Score in case the report was created after the transaction.
CreationOrderEngine.description=Scores negative if the report was created after the transaction was committed.
DescriptionSearchEngine.description=Scores based on document similarity/relevance based on commit message and report description.
MappingEngine.enabledDescription=Determines which engines to use.
MappingEngine.unknown=(unknown)
MappingEngine.unused=(unused)
RegexEngine.configDescription=URI to resource containing the regular expressions used to map the IDs.
RegexEngine.configFilesOnly=Other locations then file are currently not supported for config files: 
RegexEngine.configReadError=Regex configuration read error.
RegexEngine.description=Scores if regular expressions from a given set match. See config at: 
RegexEngine.loadedPatterns=Loaded patterns: %s
RegexEngine.invalidRegexConfig=Invalid regex config: %s
ReportTypeEngine.confidenceDescription=Confidence that is used if the report isn't of the specified type.
ReportTypeEngine.description=Scores negative if the report isn't of the specified type.
ReportTypeEngine.typeDescription=Type the report has to match, e.g. BUG.
StacktraceParserEngine.description=Analyzes stacktraces with one of the entities to contain JavaElements, that have been touched in the transaction under suspect. Additionally, the change made to the JavaElement has to be a fix.
TimestampEngine.checkingHistoryElement=Checking history element: %s
TimestampEngine.createdBeforeTransaction=report got created before transaction
TimestampEngine.description=Scores based on the relation of close and commit timestamp (1/(1+days(close - upper bound).
TimestampEngine.elementResolved=This element set solved flag.
TimestampEngine.intervalDescription=Time window for the a report has to be marked as resolved after the corresponding transaction has been committed. Format '[+-]XXd XXh XXm XXs'.
TimestampEngine.invalidInterval=Interval specification invalid. String under subject: 
TimestampEngine.reportAfterTransaction=Report got created after transaction
TimestampEngine.resolutionBehindWindow=Resolution is later than specified, value: %s
TimestampEngine.resolutionWithinInterval=Resolution is within specified interval, value: %s
TimestampEngine.scoring=Scoring with confidence: %s
TimestampEngine.usingInterval=Using interval: 
TimestampEngine.usingRegex=using regex 
SearchEngine.minTokensDescription=Minimum number of tokens required for a search.
SearchEngine.languageDescription=Minimum number of tokens required for a search.
SummarySearchEngine.description=Scores based on document similarity/relevance based on commit message and report summary.
ReportReader.providing=Providing '%s'.
TransactionFinder.processing=Processing '%s'->'%s' with '%s' candidates.
TransactionFinder.skipping=Skipping candidate '%s'<->'%s'. Already processed.
TransactionFinder.providing=Providing candidate '%s'.
TransactionFinder.noMatches=Skipping candidate analysis of '%s' due to the lag of preselected candidates.
ReportFinder.processing=Processing '%s'->'%s' with '%s' candidates.
ReportFinder.skipping=Skipping candidate '%s'<->'%s'. Already processed.
ReportFinder.providing=Providing candidate '%s'.
ReportFinder.noMatches=Skipping candidate analysis of '%s' due to the lag of preselected candidates.
Main.done=All done. Cerio!
MappableEntity.notIndexable=Field '%s' is not indexable on '%s'.
MappableEntity.unsupportedFieldKey='%s' does not support field key '%s'.
MappingChain.finderInit=Finder initialization failed. Aborting...
MappingChain.nodeCreate=Creating node for engine '%s'.
MappingChain.dbInit=Database initialization failed. Aborting...
MappingChain.started=Started '%s' toolchain. Enjoy the show: http://www.youtube.com/watch?v=yP4iVSFyWQ4
EngineProcessor.processing=[%s] Processing relation for '%s' <-> '%s'.
StrategyProcessor.processing=[%s] Processing relation for '%s' <-> '%s'.
Persister.storing=Storing '%s'. 
Feature.engineNotFound=Cannot find engine '%s'.
Feature.classNotEngine=Found corresponding class, but not of type engine '%s'.
Filter.description=Filters can be used to sort out Mappings by leveraging all information gathered at this point.
Filter.laggingConfigClass=Filter '%s' is lagging a configuration class. Make sure there is an internal class 'public static final Options extends %s<%s, %s<%s, Options>>' 
Selector.laggingConfigClass=Selector '%s' is lagging a configuration class. Make sure there is an internal class 'public static final Options extends %s<%s, %s<%s, Options>>' 
Filter.loadingFailure=Could not load filter '%s'. Does probably not exist. Aborting.
Splitter.loadingFailure=Could not load splitter '%s'. Does probably not exist. Aborting.
Splitter.laggingConfigClass=Splitter '%s' is lagging a configuration class. Make sure there is an internal class 'public static final Options extends %s<%s, %s<%s, Options>>'
Selector.loadingFailure=Could not load selector '%s'. Does probably not exist. Aborting.
Strategy.loadingFailure=Could not load strategy '%s'. Does probably not exist. Aborting.
Strategy.laggingConfigClass=Strategy '%s' is lagging a configuration class. Make sure there is an internal class 'public static final Options extends %s<%s, %s<%s, Options>>'
Filter.noDirectExtension=The class '%s' is not a direct extension of '%s' and has to be loaded by its parent '%s'.
Splitter.noDirectExtension=The class '%s' is not a direct extension of '%s' and has to be loaded by its parent '%s'.
Strategy.noDirectExtension=The class '%s' is not a direct extension of '%s' and has to be loaded by its parent '%s'.
Selector.noDirectExtension=The class '%s' is not a direct extension of '%s' and has to be loaded by its parent '%s'.
Splitter.description=Splitters are used to break down mappings on a more fine-grained level. E.g. having a Report<->Transaction mapping and breaking it down to bugs per method.
Filter.optionEnabled=Specifies which Filters should be used.
Finder.addingEngine=Adding '%s' to available engines.
Finder.addingStrategy=Adding '%s' to available strategies.
Finder.addingFilter=Adding '%s' to available filters.
Finder.addingSelector=Adding '%s' to available selectors.
Finder.addingTrainer=Adding '%s' to available trainers.
Finder.addingStorage=Adding '%s' to available storages.
Finder.addingSplitter=Adding '%s' to available splitters.
Finder.selectorUse=Using selector '%s' on '%s' with target type '%s'.
Strategy.description=A strategy determines the way mozkito decides whether a mapping is valid or not.
LuceneStorage.description=Manages the lucene search engine data objects (required by several engines).
Finder.skippingEngine=Skipping engine '%s' due to type incompatibility '%s'.
Finder.strategyUse=Using strategy '%s' on '%s'.
Finder.engineUse=Using engine '%s' on '%s'.
Finder.noSupportedFields=Engine '%s' returns NULL when asked for supported fields.
Finder.omittingSelector=Omitting selector due to instantiation error: 
CodeFragmentsEngine.description=Scores according to the presents of code fragments in both entities that match each other (at least parts of them).
Engine.addingEngineDependency=Adding new mapping engines dependency '%s' with list activator '%s'
Engine.description=Engines..... TODO
Engine.laggingConfigClass=Engine '%s' is lagging a configuration class. Make sure there is an internal class 'public static final Options extends %s<%s, %s<%s, Options>>' 
Engine.loadingFailure=Could not load engine '%s'. Does probably not exist. Aborting.
Engine.noDirectExtension=The class '%s' is not a direct extension of '%s' and has to be loaded by its parent '%s'.
Engine.noInternalConfigurator=The class '%s' does not have an internal configurator class.
Strategy.noInternalConfigurator=The class '%s' does not have an internal configurator class.
AllReportSelector.description=Looks up all regular matches of the specified pattern and returns possible (report) candidates from the database.
AllReportSelector.optionTag=Format string like 'XSTR-%%s' that determines how the match from the regex should be used when querying the database.
ReportRegexSelector.description=Looks up all regular matches of the specified pattern and returns possible (report) candidates from the database.
ReportRegexSelector.optionTag=Format string like 'XSTR-%%s' that determines how the match from the regex should be used when querying the database.
ReportRegexSelector.optionPattern=Pattern of report IDs to scan for.
TransactionRegexSelector.description=Looks up all regular matches of the specified pattern and returns possible (transaction) candidates from the database.
TransactionRegexSelector.optionPattern=Pattern of report IDs to scan for.
MappingOptions.description=... TODO
MappingOptions.optionSourceTypes=Determines what kind of stuff you want to map. E.g. =RCSTransaction,Report
SVMStrategy.description=Maps positive/negative according to the learned model of the SVM.
TotalAggreementStrategy.description=Maps positive/negative iff all engines agree on that
LibSVMTrainer.invalidVectorSize=Invalid vector size '%s'.