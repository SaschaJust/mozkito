CREATE OR REPLACE FUNCTION reposuite_file_changecouplings(tid character varying(40), tablename varchar) RETURNS integer AS $$
	
	def cc_subsets(s):
	  subsets = []
	  n_elems = len(s)
	  n_subsets = 2**len(s)
	  for i in range(0,n_subsets):
	    sub = []
	    for j in range(0,n_elems):
	      if (i >> j & 1):
	        sub.append(s[j])
	    subsets.append(sub)
	  return subsets
		
	def cc_support(s,ctime):
	  args = list(s)
	  counter = 1
	  basequery = " SELECT transaction_id FROM rcsrevision WHERE changedfile_id = $"
	  argtypes = []
	  if len(s) < 1:
	    return 0
	  q = basequery+str(counter)
	  argtypes.append("integer")
	  counter = counter + 1
	  while counter <= len(s):
	    q = q + " INTERSECT " + basequery +str(counter)
	    argtypes.append("integer")
	    counter = counter + 1
	  q = "SELECT COUNT(distinct t.id) AS support FROM ("+q+") AS r INNER JOIN rcstransaction t ON r.transaction_id = t.id WHERE timestamp < $"+str(counter)
	  args.append(ctime)
	  argtypes.append("timestamp")
	  q = plpy.prepare(q,argtypes)
	  support = plpy.execute(q,args,1)
	  if len(support) < 0:
	    return 0
	  else:
	    return support[0]['support']
	  
	
	def cc_confidence(support, change_freq):
	  if change_freq == 0:
	    return 0
	  return float(support)/float(change_freq)
	
	
	plpy.execute("DROP TABLE IF EXISTS "+str(tablename))
	plpy.execute("CREATE TABLE "+str(tablename)+" (premise integer[], implication integer, support integer, confidence float)")
	
	q = plpy.prepare("select r1.changedfile_id AS premise, r2.changedfile_id AS implication from rcsrevision r1 CROSS JOIN rcsrevision r2 WHERE r2.transaction_id = $1 AND r1.transaction_id = $1 AND r1.changedfile_id <> r2.changedfile_id ORDER BY premise",["text"])
	q_rows = plpy.execute(q, [tid])
	
	cquery = plpy.prepare("SELECT timestamp FROM rcstransaction WHERE id = $1",["text"])
	ctime = plpy.execute(cquery,[tid],1)[0]['timestamp']
	plpy.notice(ctime)
	
	seen = []
	premises = []
	implications = set()
	current_id = -1
	
	for q_row in q_rows:
	  if current_id != q_row['premise']:
	    current_id = q_row['premise']
	    if not current_id in premises: 
	      premises.append(current_id)
	    seen.append([current_id])
	    current_changefreq = cc_support([current_id],ctime)
	  implications.add(q_row['implication'])
	  support = cc_support([q_row['premise'],q_row['implication']],ctime)
	  confidence = cc_confidence(support,current_changefreq)
	  insertq = plpy.prepare("INSERT INTO "+tablename+" (premise,implication,support,confidence) VALUES(ARRAY[$1], $2,$3,$4)",["integer","integer","integer","float"])
	  plpy.execute(insertq,[q_row['premise'],q_row['implication'],support,confidence])
	
	multies = cc_subsets(premises)
	plpy.notice("implications:"+str(implications))
	plpy.notice("multies:"+str(multies))
	
	for m in multies:
	  if (len(m) > 0) and (not m in seen):
	    seen.append(m)
	    for c in implications:
	      if c in m:
	        plpy.notice("!(c) m:"+str(m)+" c:"+str(c))
	        continue;
	      m_and_c = list(m)
	      m_and_c.append(c)
	      support = cc_support(m_and_c,ctime)
	      if support < 1:
	        plpy.notice("!(s) m:"+str(m)+" c:"+str(c))
	        continue
	      freq = cc_support(m,ctime)
	      confidence = cc_confidence(support,freq)
	      plpy.notice("m:"+str(m)+" c:"+str(c))
	      insertq = plpy.prepare("INSERT INTO "+tablename+" (premise,implication,support,confidence) VALUES($1, $2,$3,$4)",["integer[]","integer","integer","float"])
	      plpy.execute(insertq,[m,c,support,confidence])
	    
	  
	return 1
$$ LANGUAGE plpython2u;
