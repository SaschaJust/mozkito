/***********************************************************************************************************************
 * Copyright 2011 Kim Herzig, Sascha Just
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 **********************************************************************************************************************/
package org.mozkito.mappings.model;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.DiscriminatorType;
import javax.persistence.DiscriminatorValue;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Transient;

import net.ownhero.dev.kanuni.conditions.Condition;

import org.mozkito.mappings.elements.CandidateId;
import org.mozkito.mappings.finder.Finder;
import org.mozkito.mappings.selectors.Selector;
import org.mozkito.persistence.Annotated;
import org.mozkito.persistence.PersistenceUtil;

/**
 * This class represents a potential mapping pair and thus encapsulates to {@link org.mozkito.persistence.Entity}s.
 * 
 * @param <F>
 *            the generic type
 * @param <T>
 *            the generic type {@link Candidate}s are generated by the {@link Finder} class using
 *            {@link Finder#getCandidates(org.mozkito.persistence.Entity, Class, PersistenceUtil)}.
 * @author Sascha Just <sascha.just@mozkito.org>
 */
@Entity
@Access (AccessType.PROPERTY)
@IdClass (CandidateId.class)
@Inheritance (strategy = InheritanceType.JOINED)
@DiscriminatorColumn (name = "TYPE", discriminatorType = DiscriminatorType.STRING)
@DiscriminatorValue ("CANDIDATE")
public abstract class Candidate<F extends org.mozkito.persistence.Entity, T extends org.mozkito.persistence.Entity>
        implements Annotated {
	
	/**
	 * The Enum Type.
	 */
	public static enum Type {
		
		/** The fix. */
		FIX;
	}
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1464864624834219097L;
	
	/** The preselectors. */
	private Set<String>       selectors        = new HashSet<String>();
	
	/** The relation type. */
	private Type              relationType;
	
	/** The id. */
	private int               id;
	
	/**
	 * Instantiates a new candidate.
	 * 
	 * @deprecated this constructor should be used by OpenJPA only.
	 */
	@Deprecated
	public Candidate() {
		// for OpenJPA only
	}
	
	/**
	 * Instantiates a new candidate.
	 * 
	 * @param type
	 *            the type
	 */
	public Candidate(final Type type) {
		setRelationType(this.relationType);
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.mozkito.mappings.model.ICandidate#addSelector(org.mozkito.mappings.selectors.Selector)
	 */
	/**
	 * Adds the selector.
	 * 
	 * @param selector
	 *            the selector
	 * @return true, if successful
	 */
	@Transient
	public boolean addSelector(final Selector selector) {
		return getSelectors().add(selector.getClassName());
	}
	
	/**
	 * Adds the selectors.
	 * 
	 * @param selectors
	 *            the selectors
	 */
	@Transient
	public void addSelectors(final Set<Selector> selectors) {
		// PRECONDITIONS
		
		try {
			for (final Selector selector : selectors) {
				addSelector(selector);
			}
		} finally {
			// POSTCONDITIONS
		}
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@SuppressWarnings ("rawtypes")
	@Override
	@Transient
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final Candidate other = (Candidate) obj;
		if (getFrom() == null) {
			if (other.getFrom() != null) {
				return false;
			}
		} else if (!getFrom().equals(other.getFrom())) {
			return false;
		}
		if (getTo() == null) {
			if (other.getTo() != null) {
				return false;
			}
		} else if (!getTo().equals(other.getTo())) {
			return false;
		}
		return true;
	}
	
	/**
	 * Gets the simple name of the class.
	 * 
	 * @return the simple name of the class.
	 */
	@Override
	@Transient
	public final String getClassName() {
		// PRECONDITIONS
		
		final StringBuilder builder = new StringBuilder();
		
		try {
			final LinkedList<Class<?>> list = new LinkedList<Class<?>>();
			Class<?> clazz = getClass();
			list.add(clazz);
			
			while ((clazz = clazz.getEnclosingClass()) != null) {
				list.addFirst(clazz);
			}
			
			for (final Class<?> c : list) {
				if (builder.length() > 0) {
					builder.append('.');
				}
				
				builder.append(c.getSimpleName());
			}
			
			return builder.toString();
		} finally {
			// POSTCONDITIONS
			Condition.notNull(builder,
			                  "Local variable '%s' in '%s:%s'.", "builder", getClass().getSimpleName(), "getHandle()"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		}
	}
	
	/**
	 * Gets the from.
	 * 
	 * @return the from
	 */
	@Transient
	public abstract F getFrom();
	
	/**
	 * Gets the id.
	 * 
	 * @return the id
	 */
	@Id
	@GeneratedValue (strategy = GenerationType.AUTO)
	public int getId() {
		PRECONDITIONS: {
			// none
		}
		
		try {
			return this.id;
		} finally {
			POSTCONDITIONS: {
				// none
			}
		}
	}
	
	/**
	 * Gets the relation type.
	 * 
	 * @return the relationType
	 */
	@Enumerated (EnumType.STRING)
	@Id
	public Type getRelationType() {
		PRECONDITIONS: {
			// none
		}
		
		try {
			return this.relationType;
		} finally {
			POSTCONDITIONS: {
				// none
			}
		}
	}
	
	/**
	 * Gets the selectors.
	 * 
	 * @return the votingSelectors
	 */
	@ElementCollection
	public Set<String> getSelectors() {
		
		return this.selectors;
		
	}
	
	/**
	 * Gets the to.
	 * 
	 * @return the to
	 */
	@Transient
	public abstract T getTo();
	
	/**
	 * {@inheritDoc}
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	@Transient
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((getFrom() == null)
		                                                ? 0
		                                                : getFrom().hashCode());
		result = (prime * result) + ((getTo() == null)
		                                              ? 0
		                                              : getTo().hashCode());
		return result;
	}
	
	/**
	 * Sets the id.
	 * 
	 * @param id
	 *            the id to set
	 */
	public void setId(final int id) {
		PRECONDITIONS: {
			// none
		}
		
		try {
			this.id = id;
		} finally {
			POSTCONDITIONS: {
				// none
			}
		}
	}
	
	/**
	 * Sets the relation type.
	 * 
	 * @param relationType
	 *            the relationType to set
	 */
	public void setRelationType(final Type relationType) {
		PRECONDITIONS: {
			// none
		}
		
		try {
			this.relationType = relationType;
		} finally {
			POSTCONDITIONS: {
				// none
			}
		}
	}
	
	/**
	 * Sets the selectors.
	 * 
	 * @param selectors
	 *            the selectors to set
	 */
	public void setSelectors(final Set<String> selectors) {
		
		this.selectors = selectors;
		
	}
	
	/*
	 * (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	/**
	 * {@inheritDoc}
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		final StringBuilder builder = new StringBuilder();
		
		builder.append(getClassName());
		builder.append(" [from="); //$NON-NLS-1$
		builder.append(getFrom());
		builder.append(", to="); //$NON-NLS-1$
		builder.append(getTo());
		builder.append("]"); //$NON-NLS-1$
		return builder.toString();
	}
}
