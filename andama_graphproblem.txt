=== Problem ===

Given a set of "Nodes" (as described below), design an algorithm that creates
a directed graph containing all nodes.

Node: 
	INPUT: 
		Number of connectors (out of 0, 1, *)
		Type <T>
	OUTPUT: 
		Number of connectors (out of 0, 1, *)
		Type <T>
		

There are six different kind of Nodes:

- Source (SRC): 0< > : 1<T>
- Filter: 1<T> : 1<T>
- Transformer (TRAFO): 1<T_1> : 1<T_2>
- Sink: 1<T> : 0< >
- Multiplexer (MUX): 1<T> : *<T>
- Demultiplexer (DEMUX): *<T> : 1<T>

=== Assumptions === 

- you are given the set of all nodes

- there aren't ANY circular dependencies/strongly connected components in the
  graph

- there IS a solution

- if a type A has been processed (i.e. been used within the graph), there
  won't be another subgraph dealing with A. This means:

  \[ \forall i \in \mathbb{N}^*: A \in \{ INPUT_i, OUTPUT_i \} \wedge A \notin \{ INPUT_{i+1}, OUTPUT_{i+1} \} : \nexists j \in \mathbb{N}^*: A \in \{ INPUT_{i+j+1}, OUTPUT_{i+j+1} \} \]

=== Requirements ===

- a DEMUX must NEVER connect to a MUX

- a MUX MUST be connected to more than 1 output node

- a DEMUX MUST be connected to more than 1 input node

- the graph is closed (starts only with SRC nodes and ends only in Sink nodes)

=== Example Graph ===

SRC<A> -> TRAFO<A,C> -+                                                 +-> TRAFO<C,D> -+
                      |                                                 |               |
                      +-> DEMUX<C> -> Filter<C> -> Filter<C> -> MUX<C> -+-> TRAFO<C,D> -+-> DEMUX<D> -> Sink<D>
                      |                                                 |               |
SRC<B> -> TRAFO<B,C> -+                                                 +-> TRAFO<C,D> -+