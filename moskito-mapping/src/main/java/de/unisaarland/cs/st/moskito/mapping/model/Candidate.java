/*******************************************************************************
 * Copyright 2011 Kim Herzig, Sascha Just
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *****************************************************************************/
package de.unisaarland.cs.st.moskito.mapping.model;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Id;

import net.ownhero.dev.ioda.Tuple;
import de.unisaarland.cs.st.moskito.mapping.finder.MappingFinder;
import de.unisaarland.cs.st.moskito.mapping.mappable.model.MappableEntity;
import de.unisaarland.cs.st.moskito.mapping.selectors.Selector;
import de.unisaarland.cs.st.moskito.persistence.Annotated;

/**
 * This class represents a potential mapping pair and thus encapsulates to {@link MappableEntity}s. {@link Candidate}s
 * are generated by the {@link MappingFinder} class using {@link MappingFinder#getCandidates(MappableEntity, Class)}.
 * 
 * @author Sascha Just <sascha.just@st.cs.uni-saarland.de>
 * 
 */
public class Candidate implements Annotated {
	
	/** The Constant serialVersionUID. */
	private static final long    serialVersionUID = 1464864624834219097L;
	
	/** the entity under subject. */
	private final MappableEntity from;
	
	/** a potential target. */
	private final MappableEntity to;
	
	/** The preselectors. */
	private final Set<String>    selectors        = new HashSet<>();
	
	/**
	 * Instantiates a new candidate.
	 * 
	 * @param candidatePair
	 *            a {@link Tuple} representing the pair (from/to)
	 * @param selectors
	 *            the selectors
	 */
	public Candidate(final Tuple<? extends MappableEntity, ? extends MappableEntity> candidatePair,
	        final Set<Selector> selectors) {
		this.from = candidatePair.getFirst();
		this.to = candidatePair.getSecond();
		
		for (final Selector selector : selectors) {
			this.selectors.add(selector.getHandle());
		}
	}
	
	/**
	 * Adds the selector.
	 * 
	 * @param selector
	 *            the selector
	 * @return true, if successful
	 */
	public boolean addSelector(final Selector selector) {
		return this.selectors.add(selector.getHandle());
	}
	
	/*
	 * (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final Candidate other = (Candidate) obj;
		if (this.from == null) {
			if (other.from != null) {
				return false;
			}
		} else if (!this.from.equals(other.from)) {
			return false;
		}
		if (this.to == null) {
			if (other.to != null) {
				return false;
			}
		} else if (!this.to.equals(other.to)) {
			return false;
		}
		return true;
	}
	
	/**
	 * Gets the from.
	 * 
	 * @return the from entity
	 */
	@Id
	public final MappableEntity getFrom() {
		return this.from;
	}
	
	/**
	 * Gets the to.
	 * 
	 * @return the to entity
	 */
	@Id
	public final MappableEntity getTo() {
		return this.to;
	}
	
	/*
	 * (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((this.from == null)
		                                                ? 0
		                                                : this.from.hashCode());
		result = (prime * result) + ((this.to == null)
		                                              ? 0
		                                              : this.to.hashCode());
		return result;
	}
	
	/*
	 * (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Candidate [from=" + this.from + ", to=" + this.to + "]"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
	}
}
